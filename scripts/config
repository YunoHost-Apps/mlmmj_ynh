#!/bin/bash

#=================================================
# CONFIG
#=================================================

# Import YunoHost helpers
source /usr/share/yunohost/helpers
source _common.sh

ynh_abort_if_errors

# -------------------------------------------------------------
# Validators
# -------------------------------------------------------------

validate__submod_list() {
    validate__email_generic "$submod_list"
}

validate__moderators() {
    validate__email_generic "$moderators"
}

validate__add() {
    validate__email_generic "$add"
}

validate__del() {
    validate__email_generic "$del"
}

# -------------------------------------------------------------rototo@gege.com
# Getters
# -------------------------------------------------------------

# General

get__list_status() {
    get_3choices "open" "closedlistsub" "closedlist"
}

get__whocanpost() {
    get_3choices "all" "subonlypost" "modonlypost"
}

# Owners

get__notifysub() {
    get_flag "notifysub"
}

get__submod() {
    get_flag "submod"
}

get__submod_list() {
    get_textfile "submod"
}

# Moderators

get__moderators() {
    get_textfile "moderators"
}

get__modnonsubposts() {
    get_flag "modnonsubposts"
}

get__moderated() {
    get_flag "moderated"
}

get__notifymod() {
    get_flag "notifymod"
}

# Sub

get__add_subscribers() {
    echo ""
}

get__del_subscribers() {
    echo ""
}

get__disable_digesters() {
    get_reverse_flag "nodigestsub"
}

get__add_digesters() {
    echo ""
}

get__del_digesters() {
    echo ""
}

get__disable_nomailsub() {
    get_reverse_flag "nodigestsub"
}

get__add_nomailsubs() {
    echo ""
}

get__del_nomailsubs() {
    echo ""
}

# Others


# -------------------------------------------------------------
# Setters
# -------------------------------------------------------------

# General

set__list_status() {
    set_3choices "open" "closedlistsub" "closedlist" "$list_status"
}

set__whocanpost() {
    set_3choices "all" "subonlypost" "modonlypost" "$whocanpost"
}

# Owners

set__notifysub() {
    set_flag "notifysub" "$notifysub"
}

set__submod() {
    if [[ $submod == 1 ]]; then
        if [[ -n "$submod_list" ]]; then
            echo "$submod_list" > "$control_dir/submod"
        else
            touch "$control_dir/submod"
        fi
    else
        ynh_secure_remove "$control_dir/submod"
    fi
}

# Moderation

set__modnonsubposts() {
    set_flag "modnonsubposts" "$modnonsubposts"
}

set__moderated() {
    set_flag "moderated" "$moderated"
}

set__notifymod() {
    set_flag "notifymod" "$notifymod"
}

# sub

set__add_subscribers() {
    while IFS= read -r email; do
        $bin_dir/mlmmj-sub -L $install_dir -a $email -c -s
    done <<< "$add"
}

set__del_subscribers() {
    while IFS= read -r email; do
        $bin_dir/mlmmj-unsub -L $install_dir -a $email -c -N -s
    done <<< "$del"
}

# -------------------------------------------------------------
# Generic variables and functions
# -------------------------------------------------------------

# Regex pour les adresses email
email_regex='^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'

validate__email_generic() {
    local email_list="$1"
    local invalid_emails=""
    while IFS= read -r email; do
        if [[ ! $email =~ $email_regex ]] && [[ ! -z "$email" ]]; then
            invalid_emails+="$email\n"
        fi
    done <<< "$email_list"

    if [[ ! -z "$invalid_emails" ]]; then
        echo -e "Invalid email addresses:\n$invalid_emails"
    fi
}

get_flag() {
    local flag_name="$1"
    if [ -f "$control_dir/$flag_name" ]; then
        echo "1"
    else
        echo "0"
    fi
}

set_flag() {
    local flag_name="$1"
    local flag_value="$2"

    if [[ $flag_value == 1 ]]; then
        touch "$control_dir/$flag_name"
        ynh_print_info "--message='Created $control_dir/$flag_name'"
    else
        ynh_secure_remove "$control_dir/$flag_name"
        ynh_print_info "--message='Removed $control_dir/$flag_name'"
    fi
}

get_reverse_flag() {
    local flag_name="$1"
    if [ -f "$control_dir/$flag_name" ]; then
        echo "0"
    else
        echo "1"
    fi
}

set_reverse_flag() {
    local flag_name="$1"
    local flag_value="$2"

    if [[ $flag_value == 0 ]]; then
        touch "$control_dir/$flag_name"
        ynh_print_info "--message='Created $control_dir/$flag_name'"
    else
        ynh_secure_remove "$control_dir/$flag_name"
        ynh_print_info "--message='Removed $control_dir/$flag_name'"
    fi
}

get_3choices() {
    local choice1="$1"
    local choice2_file="$2"
    local choice3_file="$3"


    if [ -f "$control_dir/$choice3_file" ]; then
        echo "$choice3_file"
    elif [ -f "$control_dir/$choice2_file" ]; then
        echo "$choice2_file"
    else
        echo "$choice1"
    fi
}

set_3choices() {
    local choice1_file="$1"
    local choice2_file="$2"
    local choice3="$3"
    local config_value="$4"

    case $config_value in
        "$choice3")
            ynh_secure_remove "$control_dir/$choice1_file"
            ynh_secure_remove "$control_dir/$choice2_file"
            ynh_print_info "--message='Removed $control_dir/$choice1_file and/or $control_dir/$choice2_file'"
            ;;

        "$choice1_file")
            touch "$control_dir/$choice1_file"
            ynh_secure_remove "$control_dir/$choice2_file"
            ynh_print_info "--message='Created $control_dir/$choice1_file and removed $control_dir/$choice2_file if needed'"
            ;;

        "$choice2_file")
            touch "$control_dir/$choice2_file"
            ynh_secure_remove "$control_dir/$choice1_file"
            ynh_print_info "--message='Created $control_dir/$choice2_file and removed $control_dir/$choice1_file if needed'"
            ;;
    esac
}

get_textfile() {
    local file_name="$1"
    local file_path="$control_dir/$file_name"

    if [ -f "$file_path" ]; then
        cat "$file_path"
    else
        echo ""
    fi
}

sync_from_control_dir() {
    local control_file="$install_dir/control/$1"
    local ynh_file="$install_dir/ynh/$1.txt"

    if [ -f "$control_file" ] && [ "$control_file" -nt "$ynh_file" ]; then
        cp "$control_file" "$ynh_file"
    fi
}

sync_from_ynh_dir() {
    local control_file="$install_dir/control/$1"
    local ynh_file="$install_dir/ynh/$1.txt"

    if [ -f "$ynh_file" ]; then
        cp "$ynh_file" "$control_file"
    fi
}

ynh_app_config_get() {
    local files_to_sync=("owner" "moderators" "submod")
    local sub_lists=("subscribers" "digesters" "nomailsubs")

    for file in "${files_to_sync[@]}"; do
        sync_from_control_dir "$file"
    done

    for list_dir in "${sub_lists[@]}"; do
        cat "$install_dir/${list_dir}.d/"* | sort > "$install_dir/ynh/${list_dir}.txt"
    done

    _ynh_app_config_get
}

ynh_app_config_apply() {
    _ynh_app_config_apply

    local files_to_sync=("owner" "moderators" "submod")

    for file in "${files_to_sync[@]}"; do
        sync_from_ynh_dir "$file"
    done
}

# -------------------------------------------------------------
# Config apply
# -------------------------------------------------------------

ynh_app_config_run $1
